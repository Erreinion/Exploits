# Kaliglue.py
# Mar 13, 2013

# Use Redis to store the output from various info-gathering utils

# schema
#hset target:1 ip1 "10.10.97.24"
#hset target:1 names "jordan2.van.com"
#hset target:1 name:reasons "PTR"
#hset target:1 os1 "win7"
#hset target:1 os1:reason "lanmanager"
#hset target:1 notes ""
#hset target:1 ports [445/tcp, 1033/tcp]
#hset target:1 service:tcp:445:name "smb"
#hset target:1 service:tcp:445:version "2"
#hset target:1 service:tcp:445:vulnerabilities ["", ""]
#hset target:1 exploit1 ""
#hset target:1 loot1 ""

# indexes
#set targets target:1 		# deals with dual-homed targets
#hset ip:ID "10.10.97.24" target:1
#hset name:ID "jordan2.van.com" target:1
#set web "10.10.97.24:80" "10.10.97.24:443" "10.10.97.24:8080"
#set dns "10.10.97.24"
#set owned target:1

# Services: smb, smtp, snmp, ssh, telnet, imap, pop3, http/s, ftp, mssql, postgres, mysql, oracle,
#	vnc, x11, dns, tftp, rdp

# Process: sweep for ips, query dns, sweep each for common ports, service versions, sweep for uncommon TCP ports
#	OS detection
#	run scanners on services (ftp, http)
# 
# TODO: trigger nmap scan, parse results, save to db, pass value to next tool, threading?, exploitdb search, msf search
# Queries: non-owned targets, summary, final report?
# manually set info? need a UI for that
# format/write payloads from msf (meterpreter/shell)? 
# deal with IPs that report as down but are actually up (firewalled?)


import redis
from xml.etree import ElementTree as ET

db = redis.Redis(localhost)

nmapxmlfile = 'c:\\users\\jordans\\Desktop\\nmap.xml'

# pull host info from nmap xml output
# create a temp object of the data
# decide to create a new entry or append an existing one
#	 if ip or name is not already in the db, make a new target
# 	 else append to existing target	
def importNmap(filename):
	tree = ET.parse(filename)
	root = tree.getroot()
	

	# for each host that is 'up'
	for host in root.iter('host'):
		if host.find('status').get('state') == "up":
			addr = host.find('address').get('addr')
			names = [ h.get('name') for h in host.iter('hostnames')]

			# get target ID if IP or name exists in the index
			# else generate a new targetID
			target = getTarget(ip = addr)

			while not target:
				# loop thru the names to find a target match
				for n in names:
					target = getTarget(name = n)
			
			# if not target match made, create a new target
			if not target:
				target = createTarget(addr)
			# exception check
			if not target:
				print('Error has occured in assigning target: %s, %s' % ip, addr)
				break

			# store the port info
			for port in host.find('ports').findall('port'):
				if port.find('state').get('state') == "open":
					_port = port.get('portid')
					_proto = port.get('protocol')
					_name = port.find('service').get('name')
					_ver = port.find('service').get('version')
					_extra = port.find('service').get('product'), port.find('state').get('extrainfo')
					
					setPort(target, _port, proto = _proto, name = _name, ver = _ver, extra = _extra)

				# add port script output here



def createTarget(ip):
	id = db.get('targetID')
	db.incr('targetID')

	target = 'target:' + str(id)

	setValue(target, 'ip', ip)

	return target

# returns false if not in indexes
def getTarget(ip = '', name = ''):
	if (ip != ''):
		target = db.hget("ip:ID", ip)
		return target
	elif (name != ''): 
		target = db.hget("names:ID", name)
		return target
	else
		return False

def getPorts(target):
	ports = [ db.hget(target, "ports") ]
	return ports

def setPorts(target, port):
	ports = [ getPorts(target) ]
	ports.append(port)
	db.hset(target, "ports", ports)

# get the next key for incremented keys
def getNextKey(target, key):
	for x in range(1:50):
		testKey = key + str(x)
		if db.hget(target, testKey):
			pass
		else:
			return testKey

# set the next available key to the value with the optional 'reason' 
# setValue(target:1, os, Win7, lanmanager)
def setValue(target, type, value, reason = ""):
	keyX = getNextKey(target, type)
	keyXreason = keyX + ":reason"
	db.hset(target, keyX, value)
	db.hset(target, keyXreason, reason)

def setPort(target, port, proto = 'tcp', name = '', ver = '', extra = ''):
	# service:tcp:445:name
	_proto = proto.lowercase
	_port = str(port)
	_name = name
	_ver = str(ver)
	_extra = extra

	serviceX = "service:" + _proto + ":" + _port

	# if the port is not already in target's db
	if port not in getPorts(target):

		# add the port to the hosts port index
		_port_prot = _port + "/" + _proto
		setPorts(target, _port_prot)

		# add data to the db
		serviceXname = serviceX + ":name"
		serviceXversion = serviceX + ":version"
		serviceXextra = serviceX + ":extra"

		db.hset(target, serviceXname, _name)
		db.hset(target, serviceXversion, _ver)
		db.hset(target, serviceXextra, _extra)

	# else append data to the existing service data
	#service:tcp:445:name "smb"
	#service:tcp:445:version "2"
	#service:tcp:445:vulnerabilities ["", ""]
	else:
		





		


# 
def infos(serv,host):
	print("")
	print("====================================")
	print("IP: %s" % host.address)
	print("OS: %s" % host.os_name)
	print("Servicename: %s" % serv.name)
	print("Service Port: %s" % serv.port)
	print("Service Protocol: %s" % serv.proto)
	print("====================================")
	print("")