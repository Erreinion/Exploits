# Kaliglue.py
# Mar 13, 2013

# Use Redis to store the output from various info-gathering utils

# schema
#hset target:1 ip1 "10.10.97.24"
#hset target:1 names "jordan2.van.com"
#hset target:1 name:reasons "PTR"
#hset target:1 os1 "win7"
#hset target:1 os1:reason "lanmanager"
#hset target:1 notes ""
#hset target:1 ports [445/tcp, 1033/tcp]
#hset target:1 service:tcp:445:name "smb"
#hset target:1 service:tcp:445:version "2"
#hset target:1 service:tcp:445:vulnerabilities ["", ""]
#hset target:1 exploit1 ""
#hset target:1 loot1 ""

# indexes
#set targets target:1 		# deals with dual-homed targets
#hset ip:ID "10.10.97.24" target:1
#hset name:ID "jordan2.van.com" target:1
#set web "10.10.97.24:80" "10.10.97.24:443" "10.10.97.24:8080"
#set dns "10.10.97.24"
#set owned target:1

# Services: smb, smtp, snmp, ssh, telnet, imap, pop3, http/s, ftp, mssql, postgres, mysql, oracle,
#	vnc, x11, dns, tftp, rdp

# Process: sweep for ips, query dns, sweep each for common ports, service versions, sweep for uncommon TCP ports
#	OS detection
#	run scanners on services (ftp, http)
# 
# TODO: trigger nmap scan, parse results, save to db, pass value to next tool, threading?, exploitdb search, msf search
# Queries: non-owned targets, summary, final report?
# manually set or delete info? need a UI for that
# format/write payloads from msf (meterpreter/shell)? 
# deal with IPs that report as down but are actually up (firewalled?)
# add a cpe lookup?
# what to do with script/elem data?
# or ditch redis and add script outputs to the nmap xml file?
# browsing option ('what's interesting?')


import redis
from xml.etree import ElementTree as ET

db = redis.Redis(localhost)

nmapxmlfile = 'c:\\users\\jordans\\Documents\\GitHub\\Exploits\\KaliGlue\\single_nmap.xml'

# pull host info from nmap xml output
# create a temp object of the data
# decide to create a new entry or append an existing one
#	 if ip or name is not already in the db, make a new target
# 	 else append to existing target	
def importNmapXML(filename):
	tree = ET.parse(filename)
	root = tree.getroot()
	
	nmap_ver = root.get('version')

	# for each host that is 'up'
	for host in root.iter('host'):
		if host.find('status').get('state') == "up":
			addr = host.find('address').get('addr')
			names = [ h.get('name') for h in host.iter('hostnames')]

			target = acquireTarget(addr, names)
			
			# capture the OS type
			_os = host.find('os').find('osmatch').get('name')
			setValue(target, 'os', _os, 'nmap fingerprint')

			# add hostscript outputs
				# need to capture stuff like hostname, mac, etc in a generic way ...
			for script in host.find('hostscript').findall('script'):
				_hostscript_name = script.get('id')
				_hostscript_output = script.get('output')

				setHostFindings(target, 'nmap', nmap_ver, _hostscript_name, _hostscript_output)

			# store the port info
			for port in host.find('ports').findall('port'):
				if port.find('state').get('state') == "open":
					_port = port.get('portid')
					_proto = port.get('protocol')
					_name = port.find('service').get('name')
					_ver = port.find('service').get('version')
					_extra = port.find('service').get('product'), port.find('state').get('extrainfo')

					setPort(target, _port, proto = _proto, name = _name, ver = _ver, extra = _extra)

					# add the cpe info if found
					if port.find('service').find('cpe') is not None:
						cpe = port.find('service').find('cpe').text
						setCPE(target, _port, _proto, cpe)

					# add port script output 
					for script in port.find('script'):
						_source = 'nmap'
						_script_name = script.get('id')
						_findings = script.get('output')

						setFindings(target, _source, nmap_ver, _script_name, _findings, _port, _proto)




def acquireTarget(ip, names):
	# get target ID if IP or name exists in the index
	# else generate a new targetID
	_target = getTarget(ip = ip)

	while not _target:
		# loop thru the names to find a target match
		for n in names:
			_target = getTarget(name = n)
	
	# if not target match made, create a new target
	if not _target:
		_target = createTarget(addr)
	# exception check
	if not _target:
		print('Error has occured in assigning target: %s, %s' % ip, addr)
		break
	return _target

# grabs the next targetID and creates a new hash
def createTarget(ip):
	id = db.get('targetID')
	db.incr('targetID')

	target = 'target:' + str(id)

	setValue(target, 'ip', ip)

	return target

# looks up target in the db
# returns false if not in indexes
def getTarget(ip = '', name = ''):
	if (ip != ''):
		target = db.hget("ip:ID", ip)
		return target
	elif (name != ''): 
		target = db.hget("names:ID", name)
		return target
	else
		return False

# returns the ports index of a target
def getPorts(target):
	ports = [ db.hget(target, "ports") ]
	return ports

# get the next key for incremented keys
def getNextKey(target, key):
	for x in range(1:50):
		testKey = key + str(x)
		if db.hget(target, testKey):
			pass
		else:
			return testKey

# appends a new port to the ports index of a target
def setPorts(target, port, proto):
	_port_prot = port + "/" + proto
	ports = [ getPorts(target) ]
	ports.append(_port_prot)
	db.hset(target, "ports", ports)

# set the next available key to the value with the optional 'reason' 
# setValue(target:1, os, Win7, lanmanager)
# possible to have to customize to each new type (os, etc)
def setValue(target, type, value, reason = ""):
	keyX = getNextKey(target, type)
	keyXreason = keyX + ":reason"
	db.hset(target, keyX, value)
	db.hset(target, keyXreason, reason)

# add new or append port/service data to the target
def setPort(target, port, proto = 'tcp', name = '', ver = '', extra = ''):
	_proto = proto.lowercase
	_port = str(port)
	_name = name
	_ver = str(ver)
	_extra = extra

	serviceX = "service:" + _proto + ":" + _port
	serviceXname = serviceX + ":name"
	serviceXversion = serviceX + ":version"
	serviceXextra = serviceX + ":extra"

	_port_prot = _port + "/" + _proto 

	# if the port is not already in target's db
	if _port_prot not in getPorts(target):

		# add the port to the hosts port index
		setPorts(target, _port, _prot)

	# add data to the db
	# currently this overwrites existing data (except for 'extrainfo')
	appended_extra = db.hget(target, serviceXextra).append(_extra)

	db.hset(target, serviceXname, _name)
	db.hset(target, serviceXversion, _ver)
	db.hset(target, serviceXextra, appended_extra)

# add CPE info to an existing service in the db
def setCPE(target, port, proto, cpe):
	_port = str(port)
	_proto = proto.lower
	_cpe = cpe
	
	_port_prot = _port + "/" + _proto 
	if _port_prot not in getPorts(target):
		print('port not in db')
	else:
		serviceXcpe = "service:" + _proto + ":" + _port + ":cpe"
		db.hset(target, serviceXcpe, _cpe)

# universal API to write port-level findings to the DB
def setFindings(target, toolname, tool_version, scan_type, findings, port = None, proto = None):

# universal API to write host-level findings to the DB
def setHostFindings(target, source, ver, type, findings):
	_source = source
	_ver = str(ver)
	_type = type
	_findings = findings

	key = getNextKey(target, 'hostscript')
	keyXsource = key + ":source"
	keyXversion = key + ":version"
	keyXtype = key + ":type"
	keyXfindings = key + ":findings"

	db.hset(target, keyXsource, _source)
	db.hset(target, keyXversion, _ver)
	db.hset(target, keyXtype, _type)
	db.hset(target, keyXfindings, _findings)


# 
def infos(serv,host):
	print("")
	print("====================================")
	print("IP: %s" % host.address)
	print("OS: %s" % host.os_name)
	print("Servicename: %s" % serv.name)
	print("Service Port: %s" % serv.port)
	print("Service Protocol: %s" % serv.proto)
	print("====================================")
	print("")